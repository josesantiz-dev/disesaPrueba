package net.giro.rh.admon.dao;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map.Entry;

import net.giro.DAOImpl;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import net.giro.rh.admon.beans.Empleado;

@Stateless
public class EmpleadoImp extends DAOImpl<Empleado> implements EmpleadoDAO  {
	@PersistenceContext
	private EntityManager entityManager;

	@Override
	public void delete(Empleado entity) {
		try {
			entity = entityManager.getReference(Empleado.class, entity.getId());
			entityManager.remove(entity);
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	public void update(Empleado entity) {
		try {
			entityManager.merge(entity);
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	public Empleado findById(Integer id) {
		try {
			Empleado instance = entityManager.find(Empleado.class, id);
			return instance;
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findByProperty(String propertyName, final Object value) {
		try {
			final String queryString = "select model from Empleado model where model."
					+ propertyName + "= :propertyValue order by model." + propertyName;
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findAll() {
		try {
			final String queryString = "select model from Empleado model order by model.nombre ";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findAllActivos() {
		try {
			final String queryString = "select model from Empleado model where model.estatus = 0 order by model.nombre ";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	//It's there to suppress the warning generated by (E) elementData[lastRet = i], 
	//which for the compiler is type unsafe. The compiler can not garauntee that the casting will succeed at runtime.
	//But since the the person who wrote the code knew that it was always going to be safe, decided to use @SuppressWarnings("unchecked")
	// to suppress the warning at compilation.
	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findByEmpleado(String nombreEmpleado) {
		try {
			final String queryString = "select empleado from Empleado empleado where lower(empleado.nombre) like '%"+ nombreEmpleado +"%' order by empleado.nombre ";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findLikeClaveNombre(String value) {
		try {
			final String queryString = "select model from Empleado model" + 
			("".equals(value) || value == null ? "" : " where model.catAreasId like '%" + value + "%' or lower(model.descripcion) like '%" + value.toLowerCase() + "%'");
			Query query = entityManager.createQuery(queryString);
			query.setParameter("propertyValue", value);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	public List<Empleado> findByPropertyPojoCompleto(String propertyName, String tipo, long value) {
		return null;
	}
	
	
	//Para validar empleado repetido
	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findEmpleadoRepetido(long idEmpleado) {
		try {
			final String queryString = "select empleado from Empleado empleado where empleado.idPersona = "+ idEmpleado + " order by id desc";
			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}

	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findLikeProperty(String propertyName, Object value, int limite) {
		String queryString = "select model from Empleado model ";
		StringBuffer sb = null;
		
		try {
			if(value != null && !"".equals(value.toString())) {
				if ("id".equals(propertyName) || (propertyName.startsWith("id") && Character.isUpperCase(propertyName.charAt(2)))) {
					queryString += " where cast(model."+ propertyName + " as string) LIKE :propertyValue";
				} else {
					queryString = queryString + " where lower(model."+ propertyName + ") LIKE :propertyValue";
				}
				
				sb = new StringBuffer();
	    		sb.append("%");
	    		sb.append(value.toString().toLowerCase());
	    		sb.append("%");
			}
			queryString += " order by model." + propertyName;
			
			Query query = entityManager.createQuery(queryString);
			if (value != null && !"".equals(value.toString()))
				query.setParameter("propertyValue", sb.toString());
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findByProperties(HashMap<String, Object> params) throws Exception{
		SimpleDateFormat formateador = new SimpleDateFormat("MM/dd/yyyy");
		String queryString = "";
		String whereString = "";
		
		try {
			queryString = "select model from Empleado model ";
			for(Entry<String, Object> e : params.entrySet()) {
				if (! whereString.isEmpty())
					whereString += " and";
				
				if (e.getValue().getClass() == java.util.Date.class) 
					whereString += " date(model." + e.getKey() + ") = date('" + formateador.format((Date) e.getValue()) + "')";
				else if (e.getValue().getClass() == java.math.BigDecimal.class) 
					whereString += " lower(cast(model." + e.getKey() + " as string)) = lower('" + ((BigDecimal) e.getValue()).toString() + "')";
				else
					whereString += " lower(cast(model." + e.getKey() + " as string)) = lower('" + e.getValue().toString() + "')";
			}
			
			if (! whereString.isEmpty())
				queryString = queryString + " where " + whereString;
			queryString += " order by model.id desc";

			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	@Override
	@SuppressWarnings("unchecked")
	public List<Empleado> findLikeProperties(HashMap<String, String> params) throws Exception{
		String queryString = "";
		String whereString = "";
		
		try {
			queryString = "select model from Empleado model ";
			for(Entry<String, String> e : params.entrySet()){
				if (whereString.length() > 0)
					whereString += " and";
				whereString += " cast(model." + e.getKey() + " as string) like '%" + e.getValue() + "%'";
			}
			
			if (! whereString.isEmpty())
				queryString = queryString + " where " + whereString;
			queryString += " order by model.id desc";

			Query query = entityManager.createQuery(queryString);
			return query.getResultList();
		} catch (RuntimeException re) {
			throw re;
		}
	}
}

/* ----------------------------------------------------------------------------------------------------------------
 *  HISTORIAL DE MODIFICACIONES
 * ----------------------------------------------------------------------------------------------------------------
 *  VER |    FECHA   | 		AUTOR 		| DESCRIPCION
 * ----------------------------------------------------------------------------------------------------------------
 *  2.2 | 2017-05-23 | Javier Tirado 	| Implemento los metodos findByProperties y findLikeProperties
 */